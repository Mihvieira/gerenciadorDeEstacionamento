scalar DateTime
  @specifiedBy(url: 
    "https://scalars.graphql.org/andimarek/date-time.html"
  )

schema{
  query: Query
  mutation: Mutation
}

enum EstadoVaga {
  DESOCUPADA,
  OCUPADA
}

enum TipoVeiculo {
  MOTO,
  CARRO
}

# Tipos principais
type Endereco {
  logradouro: String!
  bairro: String!
  cep: String
  cidade: String!
  uf: String!
  complemento: String
  numero: String
}

type DadosPessoais {
  nome: String!
  cnpj: String!
  telefone: String!
}

type Estacionamento {
  id: ID!
  dadosEmpresa: DadosPessoais!
  endereco: Endereco!
  qtdMaxMotos: Int!
  qtdMaxCarros: Int!
  precoPorHora: Float!
}

type Registro {
  id: ID!
  vaga_id: Int!
  veiculo_id: Int!
  entrada: DateTime!
  saida: DateTime
  tempo: String
  valorTotal: Float
}

type Veiculo {
  id: ID!
  placa: String!
  modelo: String!
  cor: String!
  tipo: TipoVeiculo!
}

#Tipos principais
type Vaga {
  id: ID!
  setor: String!
  tipo: TipoVeiculo!
  estadoVaga: EstadoVaga!
  estacionamento_id: Int!
}

# Tipos de entrada
input EnderecoInput {
  logradouro: String!
  bairro: String!
  cep: String
  cidade: String!
  uf: String!
  complemento: String
  numero: String
}

input DadosPessoaisInput {
  nome: String!
  cnpj: String!
  telefone: String!
}

# Consultas para buscar dados
type Query{
  estacionamentos: [Estacionamento]
  estacionamentoPorId(id: ID!): Estacionamento

  veiculos: [Veiculo]
  veiculoPorId(id: ID!): Veiculo
  veiculoPorPlaca(placa: String!): Veiculo

  vagas: [Vaga!]!
  vagaPorId(id: ID!): Vaga
  vagaPorEstadoTipo(estadoVaga: EstadoVaga!, tipo: TipoVeiculo!): [Vaga]

  registros: [Registro]
  registroPorId(id: ID!): Registro
  registroPorData(data: String!): [Registro]
}

# Mutations para criar, atualizar e excluir dados
type Mutation{
  criarEstacionamento(dadosEmpresa: DadosPessoaisInput!, endereco: EnderecoInput!, qtdMaxMotos: Int!, qtdMaxCarros: Int!, precoPorHora: Float!): Estacionamento!
  atualizarEstacionamento(id: ID!, dadosEmpresa: DadosPessoaisInput, endereco: EnderecoInput, qtdMaxMotos: Int, qtdMaxCarros: Int, precoPorHora: Float): Estacionamento!
  excluirEstacionamento(id: ID!): Boolean!

  criarVeiculo(placa: String!, modelo: String!, cor: String!, tipo: TipoVeiculo!): Veiculo!
  excluirVeiculo(id: ID!): Boolean!
  atualizarVeiculo(id: ID!, placa: String, modelo: String, cor: String, tipo: TipoVeiculo): Veiculo!

  criarVaga(setor: String!, tipo: TipoVeiculo!, estadoVaga: EstadoVaga!, estacionamento_id: Int!): Vaga
  excluirVaga(id: ID!): Boolean!
  atualizarVaga(id: ID!, setor: String, tipo: TipoVeiculo, estadoVaga: EstadoVaga, estacionamento_id: Int!): Vaga
  atualizarEstadoVaga(id: ID!, estadoVaga: EstadoVaga!): Vaga

  criarRegistro(vaga_id: Int!, veiculo_id: Int!, entrada: DateTime!, saida: DateTime): Registro!
  excluirRegistro(id: ID!): Boolean!
  incluirSaidaRegistro(id: ID!, saida: DateTime!): Registro!
  atualizarRegistro(id: ID!, entrada: DateTime, saida: DateTime, vaga_id: Int, veiculo_id: Int): Registro!
}
